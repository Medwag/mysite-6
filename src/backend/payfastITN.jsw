// backend/payfastITN.jsw
import wixData from 'wix-data';
import { getSecret } from 'wix-secrets-backend'; // For secure access to PayFast Secret Key
import { customTrigger } from '@wix/automations/backend'; // NEW: For triggering Wix Automations

// --- Configuration ---
// Trusted PayFast IP prefixes for initial security check
const TRUSTED_IP_PREFIXES = [
    "197.97.145.",      // 197.97.145.144/28
    "41.74.179.",       // 41.74.179.192/27
    "102.216.36.",      // 102.216.36.0/28 and 128/28
    "144.126.193.139"   // Single IP
];

// --- Helper Functions ---

/**
 * Checks if an IP address belongs to a trusted PayFast range.
 * @param {string} ip - The IP address to check.
 * @returns {boolean} True if the IP is trusted, false otherwise.
 */
function isTrustedIP(ip) {
    return TRUSTED_IP_PREFIXES.some(prefix => ip.startsWith(prefix));
}

/**
 * Generates a unique public view ID for new profiles.
 * @returns {string} A unique 8-character alphanumeric string.
 */
function generatePublicViewId() {
    return Math.random().toString(36).substring(2, 10);
}

/**
 * Logs PayFast ITN data to the "PayFast_Logs" collection.
 * @param {string} type - Type of payment (e.g., "signup", "subscription").
 * @param {string} ip - IP address from which the ITN was received.
 * @param {string} payload - Raw payload received from PayFast.
 * @param {boolean} isTrusted - Whether the IP is trusted.
 * @param {Object} extra - Additional data to log (e.g., userId, status, tier, cycle).
 */
async function logITN(type, ip, payload, isTrusted, extra = {}) {
    try {
        await wixData.insert("PayFast_Logs", {
            paymentType: type,
            ipAddress: ip,
            isTrusted,
            receivedAt: new Date(),
            rawPayload: payload,
            ...extra
        });
        console.log(`‚úÖ ITN logged for ${type}:`, extra);
    } catch (e) {
        console.error("‚ùå Failed to log ITN:", e);
    }
}

/**
 * Performs PayFast ITN verification by sending data back to PayFast.
 * THIS IS THE RECOMMENDED AND MOST SECURE METHOD.
 * @param {Object} params - The parsed ITN parameters from PayFast.
 * @param {string} receivedSignature - The 'signature' received from PayFast.
 * @returns {Promise<boolean>} True if the ITN is valid, false otherwise.
 */
async function verifyPayFastITN(params, receivedSignature) {
    // 1. Remove the 'signature' parameter from the verification payload
    const verificationParams = { ...params };
    delete verificationParams.signature;

    // 2. Build the query string for sending back to PayFast
    const queryString = Object.keys(verificationParams)
        .sort()
        .map(key => `${key}=${encodeURIComponent(verificationParams[key]).replace(/%20/g, '+')}`)
        .join('&');

    console.log("String for PayFast verification:", queryString);

    try {
        const response = await fetch("https://www.payfast.co.za/eng/query/validate", {
            method: "POST",
            headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
            body: queryString
        });

        const validationResult = await response.text();
        console.log("PayFast Validation Result:", validationResult);

        return validationResult === "VALID";
    } catch (error) {
        console.error("‚ùå Error during PayFast IPN validation call:", error);
        return false;
    }
}

// --- Main PayFast ITN Handler ---
// This function name MUST match your PayFast ITN URL: /_functions/payfastITN
export async function post_payfastITN(request) {
    const rawBody = await request.body.text();
    const ip = request.headers["x-forwarded-for"] || "unknown"; // Correctly get client IP
    const params = Object.fromEntries(new URLSearchParams(rawBody));
    const isLocalTest = params.test_mode === "true"; // Check for PayFast test mode
    const isTrusted = isLocalTest || isTrustedIP(ip); // Verify IP

    console.log("--- PayFast ITN Received ---");
    console.log("üîî Raw ITN body:", rawBody);
    console.log("üîç Parsed params:", params);
    console.log("üîç Source IP:", ip);

    // Extract common parameters
    const userId = params.custom_str1; // User ID from your custom_str1
    const paymentStatus = params.payment_status;
    const mPaymentId = params.m_payment_id;
    const customStr2 = params.custom_str2; // This should be "signup" or your plan name

    // Log the ITN first
    await logITN(customStr2 === "signup" ? "signup" : "subscription", ip, rawBody, isTrusted, {
        userId: userId,
        status: paymentStatus,
        m_paymentid: mPaymentId,
        tier: customStr2,
        cycle: params.custom_str3, // Assuming custom_str3 holds subscription cycle
        pf_payment_id: params.pf_payment_id,
        next_payment_date: params.next_payment_date || ""
    });

    if (!isTrusted) {
        console.warn("‚õî Untrusted IP for ITN:", ip);
        return { status: 400, body: "Untrusted IP", headers: { 'Content-Type': 'text/plain' } };
    }

    // --- Validate PayFast ITN Signature (CRITICAL SECURITY STEP) ---
    // If this fails, the ITN could be fraudulent.
    const isITNValid = await verifyPayFastITN(params, params.signature);
    if (!isITNValid) {
        console.error("‚ùå PayFast ITN Signature Validation Failed!");
        return { status: 400, body: "Invalid ITN Signature", headers: { 'Content-Type': 'text/plain' } };
    }
    console.log("‚úÖ PayFast ITN Signature Validated!");

    // Only proceed if payment status is COMPLETE
    if (paymentStatus === "COMPLETE") {
        console.log(`‚úÖ ITN is COMPLETE for user: ${userId}, type: ${customStr2}`);
        try {
            let profile;
            const result = await wixData.query("Emergency_Profiles")
                .eq("_owner", userId)
                .limit(1)
                .find();

            if (result.items.length > 0) {
                profile = result.items[0];
                console.log("‚ÑπÔ∏è Found existing profile for update. Current profile:", profile);
            } else {
                // If no profile found for a user ID, create one.
                console.warn("‚ö†Ô∏è No existing Emergency Profile found for userId:", userId, "Attempting to create.");
                profile = {
                    _owner: userId,
                    publicViewId: generatePublicViewId(),
                    createdAt: new Date(),
                    subscriptionActive: false, // Default
                    membershipTier: "", // Default
                    signUpPaid: false, // Default
                    email: params.email_address || "",
                    name: (params.name_first && params.name_last) ? `${params.name_first} ${params.name_last}` : "",
                    // Initialize other fields as needed for a new profile
                };
                profile = await wixData.insert("Emergency_Profiles", profile); // Insert the new profile
                console.log("üÜï Created new Emergency Profile for:", userId);
                // Admin notification for new profile creation can be part of the automation if desired
            }

            // --- Update Profile based on ITN Type ---
            profile.lastUpdated = new Date();
            profile.status = paymentStatus;
            profile.paymentId = params.pf_payment_id || "";
            profile.email = params.email_address || profile.email || ""; // Update email if present
            // Construct full name if parts are available, otherwise retain existing or default
            profile.name = (params.name_first && params.name_last) ? `${params.name_first} ${params.name_last}` : profile.name || "";


            if (customStr2 === "signup") {
                // Logic for signup payment
                profile.signUpPaid = true;
                profile.signupDate = new Date();
                profile.lastPaymentAmount = params.amount_gross ? parseFloat(params.amount_gross) : 0;
                profile.lastPaymentDate = params.payment_date ? new Date(params.payment_date) : null;

                // Ensure subscription fields are cleared for a signup payment
                profile.subscriptionPlan = "";
                profile.payfastSubscriptionId = "";
                profile.nextPaymentDate = null;
                profile.subscriptionActive = false;

                console.log("‚úÖ Updating profile for signup payment for", userId);
                await wixData.update("Emergency_Profiles", profile);

                // --- NEW: Trigger the Wix Automation for Signup Completion ---
                const signupPayload = {
                    firstName: params.name_first || profile.name.split(' ')[0] || "Client",
                    email: profile.email,
                    userId: userId,
                    paymentAmount: profile.lastPaymentAmount,
                    paymentDate: profile.lastPaymentDate ? profile.lastPaymentDate.toISOString() : null // Convert to ISO string for DateTime field
                };
                try {
                    // Make sure 'payfastSignupComplete' is the exact Trigger ID you set in Wix Automation
                    await customTrigger.runTrigger('payfastSignupComplete', signupPayload);
                    console.log("‚úÖ Triggered 'payfastSignupComplete' automation for user:", userId);
                } catch (automationError) {
                    console.error("‚ùå Error triggering signup automation:", automationError);
                }

            } else {
                // Logic for subscription payment (customStr2 is the planName)
                const tier = customStr2;
                const cycle = params.custom_str3;

                profile.subscriptionActive = true;
                profile.membershipTier = tier;
                profile.subscriptionPlan = tier;
                profile.payfastSubscriptionId = params.token || profile.payfastSubscriptionId;
                profile.lastPaymentAmount = params.amount_gross ? parseFloat(params.amount_gross) : 0;
                profile.lastPaymentDate = params.payment_date ? new Date(params.payment_date) : null;

                // Calculate next payment date
                if (params.next_payment_date) {
                    profile.nextPaymentDate = new Date(params.next_payment_date);
                } else if (params.payment_date && params.billing_type === "1") { // "1" often indicates recurring
                    const paymentDate = new Date(params.payment_date);
                    const nextDate = new Date(paymentDate);
                    nextDate.setMonth(nextDate.getMonth() + 1);
                    profile.nextPaymentDate = nextDate;
                }

                console.log("‚úÖ Updating profile for subscription payment for", userId, "Tier:", tier, "Cycle:", cycle);
                await wixData.update("Emergency_Profiles", profile);

                // --- NEW: Trigger the Wix Automation for Subscription Activation ---
                const subscriptionPayload = {
                    firstName: params.name_first || profile.name.split(' ')[0] || "Client",
                    email: profile.email,
                    userId: userId,
                    planName: tier,
                    emergencyContactLink: "https://www.emergitag.me/your-emergency-contact-form", // <<< REPLACE WITH YOUR ACTUAL FORM LINK
                    subscriptionId: params.token || profile.payfastSubscriptionId
                };
                try {
                    // Make sure 'payfastSubscriptionActive' is the exact Trigger ID you set in Wix Automation
                    await customTrigger.runTrigger('payfastSubscriptionActive', subscriptionPayload);
                    console.log("‚úÖ Triggered 'payfastSubscriptionActive' automation for user:", userId);
                } catch (automationError) {
                    console.error("‚ùå Error triggering subscription automation:", automationError);
                }
            }

        } catch (err) {
            console.error("‚ùå Error processing ITN or updating profile for userId:", userId, "Error:", err);
            return {
                status: 500,
                body: "Internal Server Error",
                headers: { 'Content-Type': 'text/plain' }
            };
        }
    } else {
        console.warn("‚ö†Ô∏è ITN not COMPLETE. Status:", paymentStatus, "for user:", userId, "Type:", customStr2);
        // You might log other statuses (FAILED, CANCELLED, PENDING) for monitoring
    }

    return {
        status: 200,
        body: { received: true },
        headers: { 'Content-Type': 'application/json' }
    };
}