// backend/payfast-config.jsw  (replace the whole file with this cleaned version)
import { getSecret } from 'wix-secrets-backend';

class PayFastConfig {
  constructor() {
    this.isInitialized = false;
    this.config = {
      merchantId: null,
      merchantKey: null,
      passphrase: null,
      environment: 'sandbox',
      urls: {
        sandbox: 'https://sandbox.payfast.co.za/eng/process',
        live: 'https://www.payfast.co.za/eng/process'
      }
    };
  }

  async initialize() {
    console.log('[PayFast Config] Initializing…');

    const environment = (await getSecret('payfastEnvironment').catch(() => 'sandbox')) || 'sandbox';
    this.config.environment = environment;

    const merchantId = await getSecret('payfast_merchant_id').catch(() => null);
    const merchantKey = await getSecret('payfast_merchant_key').catch(() => null);
    const passphrase = await getSecret('payfast_passphrase').catch(() => '');

    if (!merchantId) throw new Error("Secret 'payfast_merchant_id' not set");
    if (!merchantKey) throw new Error("Secret 'payfast_merchant_key' not set");

    this.config.merchantId = parseInt(merchantId, 10);
    this.config.merchantKey = merchantKey;
    this.config.passphrase = passphrase || '';

    this.validateCredentials();
    this.isInitialized = true;

    console.log('[PayFast Config] ✅ Ready:', this.getConfigSummary());
  }

  validateCredentials() {
    const { merchantId, merchantKey } = this.config;
    if (isNaN(merchantId) || merchantId <= 0) throw new Error('Invalid PayFast merchant ID');
    if (!merchantKey || merchantKey.length < 10) throw new Error('Invalid PayFast merchant key');
  }

  getPaymentUrl() { this.ensure(); return this.config.urls[this.config.environment]; }
  getCredentials() { this.ensure(); return { merchantId: this.config.merchantId, merchantKey: this.config.merchantKey, passphrase: this.config.passphrase }; }
  isSandbox() { this.ensure(); return this.config.environment === 'sandbox'; }
  getEnvironment() { this.ensure(); return this.config.environment; }
  ensure() { if (!this.isInitialized) throw new Error('PayFast config not initialized'); }

  getConfigSummary() {
    this.ensure();
    return {
      environment: this.config.environment,
      merchantId: this.config.merchantId,
      merchantKeyLength: this.config.merchantKey?.length,
      hasPassphrase: !!this.config.passphrase,
      paymentUrl: this.getPaymentUrl()
    };
  }
}

const singleton = new PayFastConfig();

export async function getPayFastConfig() {
  if (!singleton.isInitialized) await singleton.initialize();
  return singleton;
}
export async function getPayFastCredentials() { return (await getPayFastConfig()).getCredentials(); }
export async function getPayFastPaymentUrl() { return (await getPayFastConfig()).getPaymentUrl(); }
export async function isPayFastSandbox() { return (await getPayFastConfig()).isSandbox(); }
