// backend/paystackUrl.jsw
// Unified Paystack Signup Payment Generator for EmergiTag

import { getPaystackSecretKey } from 'backend/paystack-config.jsw';
import { fetch } from 'wix-fetch';
import wixData from 'wix-data';
import { sendDiscordAlert } from 'backend/discord-utils.jsw';

const CALLBACK_URL = "https://www.emergitag.me/signup?gateway=paystack";

/**
 * Create a Paystack payment link for signup fee
 * @param {string} userId
 * @param {string} email
 * @returns {Promise<string|null>} Paystack redirect URL
 */
export async function createSignupPaymentUrl(userId, email, opts = {}) {
  try {
    console.log(`?? [Paystack] Creating signup payment for ${email}`);
    await sendDiscordAlert(`?? [Paystack] Initiating signup payment for ${email}`);

    const secretKey = await getPaystackSecretKey();
    if (!secretKey) throw new Error("Missing Paystack Secret Key");

    const amount = 14900; // 149.00 ZAR in kobo
    console.log(`[Paystack] Using amount ${amount} (kobo) and callback ${CALLBACK_URL}`);

    // Load profile for metadata enrichment (authoritative CMS source)
    let profile = null;
    try {
      const q = await wixData.query('Emergency_Profiles')
        .eq('_owner', userId)
        .limit(1)
        .find({ suppressAuth: true });
      profile = q.items[0] || null;
    } catch (_) {}

    const metadata = Object.assign({
      userId,
      email,
      transaction_type: 'signup_fee',
      intent: 'signup_payment',
      subscriberName: profile?.fullName || null,
      subscriberEmail: profile?.emailAddress || email || null,
      subscriberPhoneNumber: profile?.phone || profile?.signUpPhoneNumber || profile?.whatsAppNumber || null,
      subscriberHomeAddress: profile?.homeAddress || profile?.address1Input || null,
      subscriberDeliveryAddress: profile?.deliveryAddress || null
    }, opts.metaExtra || {});
    console.log("[Paystack] Metadata prepared", metadata);

    // Build initialize body
    const body = {
      email,
      amount,
      callback_url: opts.callback_url || CALLBACK_URL,
      metadata,
      currency: opts.currency || 'ZAR',
      reference: opts.reference,
      channels: Array.isArray(opts.channels) ? opts.channels : undefined
    };

    const response = await fetch("https://api.paystack.co/transaction/initialize", {
      method: "POST",
      headers: {
        "Authorization": `Bearer ${secretKey}`,
        "Content-Type": "application/json"
      },
      body: JSON.stringify(body)
    });

    console.log(`[Paystack] Paystack initialize response status: ${response.status}`);
    const result = await response.json();

    if (!result.status) {
      console.error("? Paystack API failed:", result);
      await sendDiscordAlert(`? [Paystack] API failure while creating signup payment for ${email}: ${result.message || "Unknown error"}`);
      throw new Error(result.message || "Paystack initialization failed");
    }

    console.log(`[Paystack] Paystack reference ${result.data.reference}`);

    // Store transaction for reference
    await wixData.insert("PaystackTransactions", {
      userId,
      email,
      amount: amount / 100,
      transactionType: "signup_fee",
      reference: result.data.reference,
      clientReference: opts.reference || null,
      status: "initialized",
      createdAt: new Date()
    });

    const successMessage = `? [Paystack] Payment URL created for ${email}: ${result.data.authorization_url}`;
    console.log(successMessage);
    await sendDiscordAlert(successMessage);

    return result.data.authorization_url;

  } catch (error) {
    console.error("? [Paystack] createSignupPaymentUrl error:", error);
    await sendDiscordAlert(`? [Paystack] createSignupPaymentUrl error for ${email}: ${error.message}`);
    return null;
  }
}
