// backend/core/dual-payment-gateway.jsw
// ‚úÖ PRODUCTION READY: Dual Payment Gateway Service (Paystack + PayFast)
// Gives users choice between payment methods with consistent R149.00 pricing

import { createSignupPayment } from '../paystackUrl.jsw';
import { generatePayFastUrl } from '../payfastUrl.jsw';
import wixUsersBackend from 'wix-users-backend';

/**
 * ‚úÖ PRODUCTION READY: Dual Payment Gateway Service
 * Handles both Paystack and PayFast with user choice
 */
export class DualPaymentGateway {
    
    // Fixed signup fee across both gateways
    static SIGNUP_FEE_ZAR = 149.00;
    static SIGNUP_FEE_KOBO = 14900; // For Paystack (cents)
    
    /**
     * Get available payment methods for signup
     * @param {string} userId - User ID
     * @returns {Promise<Array>} Available payment methods
     */
    static async getAvailablePaymentMethods(userId) {
        const methods = [];
        
        try {
            // Test Paystack availability
            try {
                const { getPaystackSecretKey } = await import('../paystack-config.jsw');
                const paystackKey = await getPaystackSecretKey();
                if (paystackKey) {
                    methods.push({
                        id: 'paystack',
                        name: 'Paystack',
                        description: 'Pay with Credit/Debit Card',
                        logo: 'https://static.wixstatic.com/media/paystack-logo.png',
                        fees: 'R149.00',
                        processingTime: 'Instant',
                        supported: ['Visa', 'Mastercard', 'Verve'],
                        available: true
                    });
                }
            } catch (e) {
                console.warn('Paystack not available:', e.message);
            }
            
            // Test PayFast availability  
            try {
                const { getPayFastConfig } = await import('../payfast-config.jsw');
                const payfastConfig = await getPayFastConfig();
                if (payfastConfig) {
                    methods.push({
                        id: 'payfast',
                        name: 'PayFast',
                        description: 'South African Payment Gateway',
                        logo: 'https://static.wixstatic.com/media/payfast-logo.png',
                        fees: 'R149.00',
                        processingTime: '1-2 minutes',
                        supported: ['EFT', 'Credit Cards', 'Instant EFT'],
                        available: true
                    });
                }
            } catch (e) {
                console.warn('PayFast not available:', e.message);
            }
            
            return methods;
            
        } catch (error) {
            console.error('Error getting payment methods:', error);
            return [];
        }
    }
    
    /**
     * Create signup payment with chosen gateway
     * @param {string} userId - User ID
     * @param {string} gateway - 'paystack' or 'payfast'
     * @returns {Promise<object>} Payment result
     */
    static async createSignupPayment(userId, gateway, email = null) {
        console.log(`üîÑ [DualPayment] Creating ${gateway} signup payment for user: ${userId}`);
        
        try {
            // Get user email (use provided email or fetch from user data)
            let userEmail = email;
            if (!userEmail) {
                const user = await wixUsersBackend.getUser(userId);
                userEmail = user?.loginEmail || user?.contactDetails?.emails?.[0]?.email || `user_${userId}@emergitag.me`;
            }
            
            let result;
            
            switch (gateway.toLowerCase()) {
                case 'paystack':
                    console.log('üì± [DualPayment] Processing Paystack payment...');
                    const paystackUrl = await createSignupPayment(userId, userEmail);
                    result = {
                        success: true,
                        gateway: 'paystack',
                        paymentUrl: paystackUrl,
                        amount: this.SIGNUP_FEE_ZAR,
                        currency: 'ZAR',
                        reference: `EMERGI_SIGNUP_PS_${userId}_${Date.now()}`,
                        redirectUrl: paystackUrl
                    };
                    break;
                    
                case 'payfast':
                    console.log('üè¶ [DualPayment] Processing PayFast payment...');
                    const payfastUrl = await generatePayFastUrl(userId, this.SIGNUP_FEE_ZAR);
                    result = {
                        success: true,
                        gateway: 'payfast',
                        paymentUrl: payfastUrl,
                        amount: this.SIGNUP_FEE_ZAR,
                        currency: 'ZAR',
                        reference: `EMERGI_SIGNUP_PF_${userId}_${Date.now()}`,
                        redirectUrl: payfastUrl
                    };
                    break;
                    
                default:
                    throw new Error(`Unsupported payment gateway: ${gateway}`);
            }
            
            console.log(`‚úÖ [DualPayment] ${gateway} payment created successfully`);
            return result;
            
        } catch (error) {
            console.error(`‚ùå [DualPayment] ${gateway} payment creation failed:`, error);
            return {
                success: false,
                gateway: gateway,
                error: error.message,
                amount: this.SIGNUP_FEE_ZAR,
                currency: 'ZAR'
            };
        }
    }
    
    /**
     * Create subscription payment with chosen gateway
     * @param {string} userId - User ID
     * @param {string} planName - Plan name (Bronze/Silver/Gold)
     * @param {boolean} isAnnual - Annual billing
     * @param {string} gateway - 'paystack' or 'payfast'
     * @returns {Promise<object>} Payment result
     */
    static async createSubscriptionPayment(userId, planName, isAnnual, gateway) {
        console.log(`üîÑ [DualPayment] Creating ${gateway} subscription payment for plan: ${planName}`);
        
        try {
            const user = await wixUsersBackend.getUser(userId);
            const userEmail = user?.loginEmail || user?.contactDetails?.emails?.[0]?.email || `user_${userId}@emergitag.me`;
            
            let result;
            
            switch (gateway.toLowerCase()) {
                case 'paystack':
                    const { createPaystackSubscriptionLink } = await import('../paystackUrl.jsw');
                    const paystackData = await createPaystackSubscriptionLink(planName, isAnnual, {
                        userId: userId,
                        email: userEmail,
                        planName: planName,
                        cycle: isAnnual ? 'Annual' : 'Monthly'
                    });
                    
                    result = {
                        success: true,
                        gateway: 'paystack',
                        paymentUrl: paystackData.authorization_url,
                        planName: planName,
                        cycle: isAnnual ? 'Annual' : 'Monthly',
                        redirectUrl: paystackData.authorization_url
                    };
                    break;
                    
                case 'payfast':
                    // PayFast subscription logic (you may need to implement this)
                    const { generatePayFastSubscriptionUrl } = await import('../payfastUrl.jsw').catch(() => ({}));
                    if (generatePayFastSubscriptionUrl) {
                        const payfastUrl = await generatePayFastSubscriptionUrl(userId, planName, isAnnual);
                        result = {
                            success: true,
                            gateway: 'payfast',
                            paymentUrl: payfastUrl,
                            planName: planName,
                            cycle: isAnnual ? 'Annual' : 'Monthly',
                            redirectUrl: payfastUrl
                        };
                    } else {
                        // Fallback: Use PayFast as one-time payment for subscriptions
                        result = {
                            success: false,
                            gateway: 'payfast',
                            error: 'PayFast subscriptions not yet implemented - use Paystack for subscriptions'
                        };
                    }
                    break;
                    
                default:
                    throw new Error(`Unsupported payment gateway: ${gateway}`);
            }
            
            return result;
            
        } catch (error) {
            console.error(`‚ùå [DualPayment] ${gateway} subscription payment failed:`, error);
            return {
                success: false,
                gateway: gateway,
                error: error.message
            };
        }
    }
    
    /**
     * Get payment method recommendations based on user location/preferences
     * @param {string} userId - User ID
     * @returns {Promise<object>} Recommended payment method
     */
    static async getRecommendedPaymentMethod(userId) {
        try {
            const methods = await this.getAvailablePaymentMethods(userId);
            
            if (methods.length === 0) {
                return { error: 'No payment methods available' };
            }
            
            // Default recommendation logic (can be enhanced)
            const paystack = methods.find(m => m.id === 'paystack');
            const payfast = methods.find(m => m.id === 'payfast');
            
            if (paystack && payfast) {
                return {
                    primary: paystack,   // Paystack as primary (faster, more international)
                    alternative: payfast, // PayFast as South African alternative
                    recommendation: 'Paystack recommended for faster processing'
                };
            }
            
            return {
                primary: methods[0],
                recommendation: `${methods[0].name} is available`
            };
            
        } catch (error) {
            console.error('Error getting recommended payment method:', error);
            return { error: error.message };
        }
    }
}

// Export convenience functions
export async function getPaymentMethods(userId) {
    return DualPaymentGateway.getAvailablePaymentMethods(userId);
}

export async function createSignupPaymentWithGateway(userId, gateway, email = null) {
    return DualPaymentGateway.createSignupPayment(userId, gateway, email);
}

export async function createSubscriptionPaymentWithGateway(userId, planName, isAnnual, gateway) {
    return DualPaymentGateway.createSubscriptionPayment(userId, planName, isAnnual, gateway);
}

export async function getRecommendedPaymentMethod(userId) {
    return DualPaymentGateway.getRecommendedPaymentMethod(userId);
}